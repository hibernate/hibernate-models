plugins {
	id "base-information"
	id "java-library"

	id "com.diffplug.spotless"
	id "jacoco"
}

dependencies {
	implementation libs.logging

	compileOnly libs.loggingAnnotations

	annotationProcessor libs.loggingProcessor
	annotationProcessor libs.logging
	annotationProcessor libs.loggingAnnotations

	testImplementation jakartaLibs.jpa
	testImplementation testLibs.junit5Api
	testImplementation testLibs.assertjCore

	testRuntimeOnly testLibs.junit5Engine
	testRuntimeOnly testLibs.log4j
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Java handling
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

java {
	sourceCompatibility = jdks.versions.baseline.get() as int
	targetCompatibility = jdks.versions.baseline.get() as int

	withJavadocJar()
	withSourcesJar()
}

test {
	useJUnitPlatform()
}

// create a single "compile" task
tasks.register( "compile" ).configure {
	dependsOn tasks.withType( JavaCompile )
}

tasks.withType( JavaCompile ).configureEach {javaCompile->
	options.encoding = "UTF-8"
	options.warnings false
}

// To force the build produce the same byte-for-byte archives and hence make Hibernate Models build reproducible.
// See also https://docs.gradle.org/current/userguide/working_with_files.html#sec:reproducible_archives
tasks.withType( AbstractArchiveTask ).configureEach {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Javadoc
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

tasks.named( "javadoc", Javadoc ) {
	options {
		use = true
		encoding = "UTF-8"

		addStringOption( "Xdoclint:none", "-quiet" )

		tags(
				"todo:X",
				"apiNote:a:API Note:",
				"implSpec:a:Implementation Specification:",
				"implNote:a:Implementation Note:"
		)
	}
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Spotless
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

spotless {
	//Don't fail during the check: rather than enforcing guidelines, we use this plugin to fix mistakes automatically.
	enforceCheck false
	java {
		licenseHeaderFile rootProject.file( 'config/spotless/license.java' )
		removeUnusedImports()
		indentWithTabs( 4 )
		trimTrailingWhitespace()
		endWithNewline()
	}
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Enforced rules
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

def enforceRulesTask = tasks.register( "enforceRules" ) {
	description "Enforces some formatting rules to src/main/java files"
	doLast {
		def illegalImport = ~/^import (sun|java.awt|org.slf4j)/
		def missingNewline = ~/^\s*}\s*(else|catch|finally)/
		def lowerEll = ~/\b\d+l\b/
		def errors = 0
		def tree = fileTree( "src/main/java/" )
		tree.include "**/*.java"
		tree.each { file ->
			def lineNum = 0
			def shortName = file.path.substring( rootDir.path.length() )
			file.eachLine { line ->
				lineNum++
				if ( line =~ illegalImport ) {
					errors++
					logger.error( "Illegal import in ${shortName}\n${lineNum}: ${line}" )
				}
				if ( line =~ missingNewline ) {
					errors++
					logger.error( "Missing newline in ${shortName}\n${lineNum}: ${line}" )
				}
				if ( line =~ lowerEll ) {
					errors++
					logger.error( "Lowercase long literal in ${shortName}\n${lineNum}: ${line}" )
				}
			}
		}
		if ( errors > 0 ) {
			throw new GradleException( "Code rules were violated ($errors problems)" )
		}
	}
}




// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// JaCoCo
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

def jacocoReportTask = tasks.named( "jacocoTestReport" ) {
	dependsOn tasks.named( "test" )
}

jacocoTestReport {
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir( "jacocoHtml" )
	}
}

tasks.named( "check" ) {
	dependsOn enforceRulesTask
	dependsOn tasks.named( "spotlessCheck" )
	dependsOn jacocoReportTask
}
